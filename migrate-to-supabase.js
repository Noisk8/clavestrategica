const { createClient } = require('@supabase/supabase-js');
const sqlite3 = require('sqlite3').verbose();
require('dotenv').config();

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Faltan las credenciales de Supabase en el archivo .env');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function exportFromSQLite() {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database('./candidates.db');
        
        db.all(`SELECT * FROM candidate_tracking ORDER BY name`, (err, rows) => {
            if (err) {
                reject(err);
                return;
            }
            
            console.log(`üìä Encontrados ${rows.length} candidatos en SQLite`);
            
            // Transformar los datos para Supabase
            const candidates = rows.map(row => ({
                name: row.name,
                process_status: row.process_status,
                invitation_status: row.invitation_status,
                notes: row.notes || '',
                updated_at: row.updated_at
            }));
            
            db.close();
            resolve(candidates);
        });
    });
}

async function importToSupabase(candidates) {
    try {
        console.log('üöÄ Migrando datos a Supabase...');
        
        // Limpiar tabla existente (opcional)
        console.log('üßπ Limpiando datos existentes en Supabase...');
        const { error: deleteError } = await supabase
            .from('candidate_tracking')
            .delete()
            .neq('id', 0); // Eliminar todos los registros
        
        if (deleteError) {
            console.log('‚ö†Ô∏è  Error al limpiar (probablemente la tabla estaba vac√≠a):', deleteError.message);
        }
        
        // Insertar datos por lotes
        console.log('üì• Insertando candidatos...');
        const { data, error } = await supabase
            .from('candidate_tracking')
            .insert(candidates);
        
        if (error) {
            console.error('‚ùå Error al insertar datos:', error.message);
            return false;
        }
        
        console.log(`‚úÖ ${candidates.length} candidatos migrados exitosamente`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error durante la migraci√≥n:', error.message);
        return false;
    }
}

async function verifyMigration() {
    try {
        console.log('üîç Verificando migraci√≥n...');
        
        const { data, error, count } = await supabase
            .from('candidate_tracking')
            .select('*', { count: 'exact' });
        
        if (error) {
            console.error('‚ùå Error al verificar:', error.message);
            return false;
        }
        
        console.log(`üìä Total de candidatos en Supabase: ${count}`);
        
        if (data && data.length > 0) {
            console.log('üìù Primeros 3 candidatos migrados:');
            data.slice(0, 3).forEach(candidate => {
                console.log(`  - ${candidate.name}: ${candidate.process_status} | ${candidate.invitation_status}`);
            });
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error durante la verificaci√≥n:', error.message);
        return false;
    }
}

async function migrateFull() {
    try {
        console.log('üîÑ Iniciando migraci√≥n completa de SQLite a Supabase...\n');
        
        // 1. Exportar desde SQLite
        console.log('1Ô∏è‚É£ Exportando datos de SQLite...');
        const candidates = await exportFromSQLite();
        
        if (candidates.length === 0) {
            console.log('‚ö†Ô∏è  No hay datos para migrar');
            return;
        }
        
        console.log(`üìã Datos exportados: ${candidates.length} candidatos\n`);
        
        // 2. Importar a Supabase
        console.log('2Ô∏è‚É£ Importando a Supabase...');
        const importSuccess = await importToSupabase(candidates);
        
        if (!importSuccess) {
            console.log('‚ùå Error durante la importaci√≥n');
            return;
        }
        
        console.log('');
        
        // 3. Verificar migraci√≥n
        console.log('3Ô∏è‚É£ Verificando migraci√≥n...');
        const verifySuccess = await verifyMigration();
        
        if (verifySuccess) {
            console.log('\nüéâ ¬°Migraci√≥n completada exitosamente!');
            console.log('üìã Pr√≥ximos pasos:');
            console.log('   1. Actualizar el backend para usar Supabase');
            console.log('   2. Probar la aplicaci√≥n');
            console.log('   3. Hacer backup de la BD SQLite');
        } else {
            console.log('\n‚ùå Error durante la verificaci√≥n');
        }
        
    } catch (error) {
        console.error('üí• Error general durante la migraci√≥n:', error.message);
    }
}

if (require.main === module) {
    migrateFull();
}

module.exports = { exportFromSQLite, importToSupabase, verifyMigration, migrateFull };